# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details

# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
# See http://blog.daemonl.com/2016/02/yaml.html
# To validate changes, use an online parser, eg.
# http://yaml-online-parser.appspot.com/

anchor_0: &persist_root /go/
anchor_1: &persist_paths
  - src/github.com/fabric8-services/fabric8-wit
  - pkg/
  - bin/
anchor_2: &working_dir /go/src/github.com/fabric8-services/fabric8-wit

# Settings common to each job
anchor_3: &job_defaults
  # go expects specific checkout path representing url
  working_directory: *working_dir
  docker:
    # primary container = first one in list
    - image: circleci/golang:1.9
  environment:
    TEST_RESULTS: /go/src/github.com/fabric8-services/fabric8-wit/test-results-{{CIRCLE_SHA1}}
    # The environment variables below are not needed by all steps below
    # but still specified on global level so we don't have to repeat them.
    F8_POSTGRES_HOST: localhost
    F8_POSTGRES_PORT: 5432
    F8_POSTGRES_USER: postgres
    F8_POSTGRES_PASSWORD: mysecretpassword
    F8_POSTGRES_DATABASE: postgres
    F8_POSTGRES_SSLMODE: disable
    
version: 2
jobs:

  setup-source:
    <<: *job_defaults
    steps:
      - checkout:
          # After checkout, rebase on top of master.
          # Similar to travis behavior, but not quite the same.
          # See https://discuss.circleci.com/t/1662
          post: git pull --ff-only origin "refs/pull/${CIRCLE_PULL_REQUEST//*pull\//}/merge"
      - run: 
          name: Get Go dependencies
          command: make deps
      - run: 
          name: Generate code from design files and package assets as go files using bindata
          command: make generate
        # Persist data into the workspace for use in downstream jobs.
      - persist_to_workspace:
          root: *persist_root
          paths: *persist_paths

  prepare-test-environment:
    <<: *job_defaults
    steps:
      - run: 
          name: Get package that converts go test output to a junit XML report
          command: go get github.com/jstemmer/go-junit-report
      - run:
          name: Create test output directory
          command: mkdir -p $TEST_RESULTS/junit
        # Persist data into the workspace for use in downstream jobs.
      - persist_to_workspace:
          root: *persist_root
          paths: *persist_paths

  go-code-analysis:
    <<: *job_defaults   
    steps:
      - attach_workspace:
          at: *persist_root
      - run: make analyze-go-code

  go-code-format-check:
    <<: *job_defaults   
    steps:
      - attach_workspace:
          at: *persist_root
      - run: make check-go-format

  unit-tests:
    <<: *job_defaults
    docker:
      # primary container = first one in list
      - image: circleci/golang:1.9
    steps:
      - attach_workspace:
          at: *persist_root
      - run:
          name: "Run unit tests (without coverage)"
          command: |
            trap "go-junit-report <${TEST_RESULTS}/go-test-unit.out > ${TEST_RESULTS}/junit/go-test-unit-report.xml" EXIT
            make test-unit-no-coverage | tee ${TEST_RESULTS}/go-test-unit.out      
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results
          
  integration-tests:
    <<: *job_defaults
    docker:
      # primary container = first one in list
      - image: circleci/golang:1.9
      - image: registry.centos.org/postgresql/postgresql:9.6
        environment:
          POSTGRESQL_ADMIN_PASSWORD: mysecretpassword
      - image: quay.io/openshiftio/fabric8-services-fabric8-auth:latest
        environment:
          AUTH_WIT_URL: "http://localhost:8080"
          AUTH_DEVELOPER_MODE_ENABLED: "true"
    steps:
      - attach_workspace:
          at: *persist_root
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          name: "Run integration tests (without coverage)"
          command: |
            trap "go-junit-report <${TEST_RESULTS}/go-test-integration.out > ${TEST_RESULTS}/junit/go-test-integration-report.xml" EXIT
            make test-integration-no-coverage | tee ${TEST_RESULTS}/go-test-integration.out
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results
          
  build-binaries:
    <<: *job_defaults   
    steps:
      - attach_workspace:
          at: *persist_root
      - run:
          name: Build the server and client binaries
          command: make build
          
workflows:
  version: 2
  default_workflow:
    jobs:
      - setup-source
      - prepare-test-environment:
          requires:
            - setup-source
      - go-code-analysis:
          requires:
            - setup-source
      - go-code-format-check:
          requires:
            - setup-source
      - unit-tests:
          requires:
            - prepare-test-environment
      - integration-tests:
          requires:
            - prepare-test-environment
      - build-binaries:
          requires:
            - unit-tests
            - integration-tests
            - go-code-analysis
            - go-code-format-check
      

