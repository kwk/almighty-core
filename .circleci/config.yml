# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      # primary container = first one in list
      - image: circleci/golang:1.9
      - image: registry.centos.org/postgresql/postgresql:9.6
        environment:
          POSTGRESQL_ADMIN_PASSWORD: mysecretpassword
      - image: quay.io/openshiftio/fabric8-services-fabric8-auth:latest
        environment:
          AUTH_WIT_URL: "http://localhost:8080"
          AUTH_DEVELOPER_MODE_ENABLED: "true"

    environment:
      TEST_RESULTS: /tmp/test-results
      # The environment variables below are not needed by all steps below
      # but still specified on global level so we don't have to repeat them.
      F8_POSTGRES_HOST: localhost
      F8_POSTGRES_PORT: 5432
      F8_POSTGRES_USER: postgres
      F8_POSTGRES_PASSWORD: mysecretpassword
      F8_POSTGRES_DATABASE: postgres
      F8_POSTGRES_SSLMODE: disable
      
    # go expects specific checkout path representing url
    working_directory: /go/src/github.com/fabric8-services/fabric8-wit
    
    steps:
      - checkout
      - run: 
          name: Get Go dependencies
          command: make deps
      - run: 
          name: Generate code from design files and package assets as go files using bindata
          command: make generate
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run: 
          name: Get package that converts go test output to an xml report
          command: go get github.com/jstemmer/go-junit-report
      - run:
          name: Create test output directory
          command: mkdir -p $TEST_RESULTS
      - run:
          name: "Run unit tests (without coverage)"
          command: |
            trap "go-junit-report <${TEST_RESULTS}/go-test-unit.out > ${TEST_RESULTS}/go-test-unit-report.xml" EXIT
            make test-integration-no-coverage | tee ${TEST_RESULTS}/go-test-unit.out
      #- run:
      #    name: "Run integration tests (without coverage)"
      #    command: |
      #      trap "go-junit-report <${TEST_RESULTS}/go-test-integration.out > ${TEST_RESULTS}/go-test-integration-report.xml" EXIT
      #      make test-integration-no-coverage | tee ${TEST_RESULTS}/go-test-integration.out
      - run:
          name: Build the server and client binaries
          command: make build
      
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results
