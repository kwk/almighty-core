# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      # primary container = first one in list)
      - image: circleci/golang:1.9
      - image: registry.centos.org/postgresql/postgresql:9.6
        environment:
          POSTGRESQL_ADMIN_PASSWORD: mysecretpassword
      - image: quay.io/openshiftio/fabric8-services-fabric8-auth:latest
        environment:
          AUTH_WIT_URL: "http://localhost:8080"
          AUTH_DEVELOPER_MODE_ENABLED: "true"
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    environment:
      TEST_RESULTS: /tmp/test-results
    working_directory: /go/src/github.com/fabric8-services/fabric8-wit
    steps:
      - checkout
      - run: make deps
      - run: make generate
      - run: env
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run: go get github.com/jstemmer/go-junit-report
      - run: mkdir -p $TEST_RESULTS
      - run:
          name: "Run integration tests (without coverage)"
          environment:
            F8_POSTGRES_HOST: localhost
            F8_POSTGRES_PORT: 5432
            F8_POSTGRES_USER: postgres
            F8_POSTGRES_PASSWORD: mysecretpassword
            F8_POSTGRES_DATABASE: postgres
            F8_POSTGRES_SSLMODE: disable
            #CONTACTS_DB_MIGRATIONS: /go/src/github.com/CircleCI-Public/circleci-demo-go/db/migrations
          command:
            trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
            make test-integration-no-coverage | tee ${TEST_RESULTS}/go-test.out
      - run: make build
      # specify any bash command here prefixed with `run: `
      #- run: go get -v -t -d ./...
      #- run: go test -v ./...
